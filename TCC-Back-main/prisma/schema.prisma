// Todos direitos autorais reservados pelo QOTA.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum StatusConvite {
  PENDENTE
  ACEITO
  EXPIRADO
}

enum StatusPagamento {
  PENDENTE
  PARCIALMENTE_PAGO
  PAGO
  ATRASADO
}

enum EstadoConservacao {
  NOVO
  BOM
  DESGASTADO
  DANIFICADO
}

// Modelos
model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  refreshToken      String?   @unique
  nomeCompleto      String
  telefone          String?
  cpf               String    @unique
  dataCadastro      DateTime  @default(now())
  dataConsentimento DateTime?
  versaoTermos      String?

  userPhoto         UserPhoto?
  propriedades      UsuariosPropriedades[]
  convitesEnviados  Convite[]              @relation("ConvidadoPor")
  pagamentos        PagamentoCotista[]

  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  excludedAt        DateTime?
}

model UserPhoto {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  filename   String
  url        String
  uploadedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Propriedades {
  id                      Int      @id @default(autoincrement())
  nomePropriedade         String
  tipo                    String
  valorEstimado           Float?
  enderecoCep             String?
  enderecoCidade          String?
  enderecoBairro          String?
  enderecoLogradouro      String?
  enderecoNumero          String?
  enderecoComplemento     String?
  enderecoPontoReferencia String?

  usuarios    UsuariosPropriedades[]
  fotos       FotosPropriedade[]
  documentos  DocumentosPropriedade[]
  inventario  ItemInventario[]
  convites    Convite[]
  despesas    Despesa[]

  dataCadastro DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  excludedAt   DateTime?
}

model UsuariosPropriedades {
  id              Int      @id @default(autoincrement())
  idUsuario       Int
  idPropriedade   Int
  permissao       String
  porcentagemCota Float    @default(0)
  dataVinculo     DateTime @default(now())

  usuario     User         @relation(fields: [idUsuario], references: [id])
  propriedade Propriedades @relation(fields: [idPropriedade], references: [id])

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  excludedAt  DateTime?

  @@unique([idUsuario, idPropriedade])
}

model FotosPropriedade {
  id            Int       @id @default(autoincrement())
  idPropriedade Int
  documento     String
  dataUpload    DateTime  @default(now())

  propriedade   Propriedades @relation(fields: [idPropriedade], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  excludedAt    DateTime?
}

model DocumentosPropriedade {
  id            Int       @id @default(autoincrement())
  idPropriedade Int
  tipoDocumento String
  documento     String
  dataUpload    DateTime  @default(now())

  propriedade   Propriedades @relation(fields: [idPropriedade], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  excludedAt    DateTime?
}

model ItemInventario {
  id                 Int      @id @default(autoincrement())
  idPropriedade      Int
  nome               String
  quantidade         Int      @default(1)
  estadoConservacao  EstadoConservacao @default(BOM)
  categoria          String?
  dataAquisicao      DateTime?
  descricao          String?
  valorEstimado      Float?
  codigoBarras       String?  @unique

  propriedade        Propriedades     @relation(fields: [idPropriedade], references: [id])
  fotos              FotoInventario[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  excludedAt         DateTime?
}

model FotoInventario {
  id               Int      @id @default(autoincrement())
  idItemInventario Int
  filename         String
  url              String

  itemInventario   ItemInventario @relation(fields: [idItemInventario], references: [id])
  uploadedAt       DateTime       @default(now())
  excludedAt       DateTime?
}

model Convite {
  id                Int           @id @default(autoincrement())
  token             String        @unique
  emailConvidado    String
  idPropriedade     Int
  idConvidadoPor    Int
  permissao         String
  porcentagemCota   Float         @default(0)
  usuarioJaExiste   Boolean       @default(false)
  dataExpiracao     DateTime
  status            StatusConvite @default(PENDENTE)
  aceitoEm          DateTime?

  propriedade     Propriedades @relation(fields: [idPropriedade], references: [id])
  convidadoPor    User         @relation("ConvidadoPor", fields: [idConvidadoPor], references: [id])

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Despesa {
  id              Int      @id @default(autoincrement())
  idPropriedade   Int
  descricao       String
  valor           Float
  dataVencimento  DateTime
  categoria       String?
  urlComprovante  String?
  status          StatusPagamento @default(PENDENTE)

  propriedade     Propriedades       @relation(fields: [idPropriedade], references: [id])
  pagamentos      PagamentoCotista[]

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PagamentoCotista {
  id            Int      @id @default(autoincrement())
  idDespesa     Int
  idCotista     Int
  valorDevido   Float
  pago          Boolean  @default(false)
  dataPagamento DateTime?

  despesa Despesa @relation(fields: [idDespesa], references: [id])
  cotista User    @relation(fields: [idCotista], references: [id])

  @@unique([idDespesa, idCotista])
}