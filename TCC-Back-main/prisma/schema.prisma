// Todos direitos autorais reservados pelo QOTA.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Enums
enum StatusConvite {
  PENDENTE
  ACEITO
  EXPIRADO
}

enum StatusPagamento {
  PENDENTE
  PARCIALMENTE_PAGO
  PAGO
  ATRASADO
  CANCELADO 
}

enum EstadoConservacao {
  NOVO
  BOM
  DESGASTADO
  DANIFICADO
}

enum StatusReserva {
  CONFIRMADA
  CONCLUIDA
  CANCELADA
  NO_SHOW 
}

// Modelos
model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  refreshToken      String?   @unique
  nomeCompleto      String
  telefone          String?
  cpf               String    @unique
  dataCadastro      DateTime  @default(now())
  dataConsentimento DateTime?
  versaoTermos      String?

  // Relacionamentos
  userPhoto           UserPhoto?
  propriedades        UsuariosPropriedades[]
  convitesEnviados    Convite[]                @relation("ConvidadoPor")
  pagamentos          PagamentoCotista[]
  notificacoesLidas   Notificacao[]            @relation("NotificacoesLidas")
  notificacoesGeradas Notificacao[]            @relation("AutorDaNotificacao")
  despesasCriadas     Despesa[]                @relation("CriadoPor")
  reservas            Reserva[]                
  penalidades         Penalidade[]             
  checklistsRealizados ChecklistInventario[] 
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  excludedAt        DateTime?
}

model UserPhoto {
  id         Int      @id @default(autoincrement())
  userId     Int      @unique
  filename   String
  url        String
  uploadedAt DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
}

model Propriedades {
  id                      Int      @id @default(autoincrement())
  nomePropriedade         String
  tipo                    String
  valorEstimado           Float?
  
  // Endereço
  enderecoCep             String?
  enderecoCidade          String?
  enderecoBairro          String?
  enderecoLogradouro      String?
  enderecoNumero          String?
  enderecoComplemento     String?
  enderecoPontoReferencia String?

  duracaoMinimaEstadia    Int      @default(1)
  duracaoMaximaEstadia    Int      @default(7)
  horarioCheckin          String   @default("15:00")
  horarioCheckout         String   @default("11:00")
  prazoCancelamentoReserva Int      @default(14) // Em dias
  limiteFeriadosPorCotista    Int? // Opcional: Máximo de feriados por cotista por ano
  limiteReservasAtivasPorCotista Int? // Opcional: Máximo de reservas futuras ativas por cotista
  // Relacionamentos
  usuarios     UsuariosPropriedades[]
  fotos        FotosPropriedade[]
  documentos   DocumentosPropriedade[]
  inventario   ItemInventario[]
  convites     Convite[]
  despesas     Despesa[]
  notificacoes Notificacao[]
  reservas     Reserva[]         
  penalidades  Penalidade[]      
  datasEspeciais DataEspecial[]  
  
  dataCadastro DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  excludedAt   DateTime?
}

model Reserva {
  id              Int           @id @default(autoincrement())
  idPropriedade   Int
  idUsuario       Int
  dataInicio      DateTime
  dataFim         DateTime
  numeroHospedes  Int
  status          StatusReserva @default(CONFIRMADA)
  
  propriedade     Propriedades @relation(fields: [idPropriedade], references: [id])
  usuario         User         @relation(fields: [idUsuario], references: [id])
  checklist       ChecklistInventario[] 

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model ChecklistInventario {
  id          Int      @id @default(autoincrement())
  idReserva   Int
  idUsuario   Int      // Quem realizou o checklist
  tipo        String   // "CHECKIN" ou "CHECKOUT"
  data        DateTime @default(now())
  observacoes String?

  reserva     Reserva @relation(fields: [idReserva], references: [id])
  usuario     User    @relation(fields: [idUsuario], references: [id])
  itens       ItemChecklist[]
}

model ItemChecklist {
  id                    Int      @id @default(autoincrement())
  idChecklist           Int
  idItemInventario      Int
  estadoConservacao     EstadoConservacao // Estado do item no momento do checklist
  observacao            String?
  fotoUrl               String?           // URL da foto, caso um problema seja reportado

  checklist       ChecklistInventario @relation(fields: [idChecklist], references: [id])
  itemInventario  ItemInventario      @relation(fields: [idItemInventario], references: [id])

}

model Penalidade {
  id            Int      @id @default(autoincrement())
  idPropriedade Int
  idUsuario     Int
  motivo        String   // Ex: "Cancelamento fora do prazo", "No-show"
  dataFim       DateTime // Data até quando a penalidade (ex: bloqueio) é válida

  propriedade Propriedades @relation(fields: [idPropriedade], references: [id])
  usuario     User         @relation(fields: [idUsuario], references: [id])
  createdAt   DateTime     @default(now())
}

model DataEspecial {
  id            Int      @id @default(autoincrement())
  idPropriedade Int
  data          DateTime
  descricao     String   // Ex: "Feriado de Natal", "Alta Temporada"
  tipo          String   // "FERIADO_NACIONAL", "FERIADO_LOCAL", "ALTA_DEMANDA"

  propriedade Propriedades @relation(fields: [idPropriedade], references: [id])
  createdAt   DateTime     @default(now())
}

model UsuariosPropriedades {
  id              Int      @id @default(autoincrement())
  idUsuario       Int
  idPropriedade   Int
  permissao       String
  porcentagemCota Float    @default(0)
  dataVinculo     DateTime @default(now())
  
  usuario     User         @relation(fields: [idUsuario], references: [id])
  propriedade Propriedades @relation(fields: [idPropriedade], references: [id])
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  excludedAt  DateTime?

  @@unique([idUsuario, idPropriedade])
}

model FotosPropriedade {
  id            Int       @id @default(autoincrement())
  idPropriedade Int
  documento     String
  dataUpload    DateTime  @default(now())

  propriedade   Propriedades @relation(fields: [idPropriedade], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  excludedAt    DateTime?
}

model DocumentosPropriedade {
  id            Int       @id @default(autoincrement())
  idPropriedade Int
  tipoDocumento String
  documento     String
  dataUpload    DateTime  @default(now())

  propriedade   Propriedades @relation(fields: [idPropriedade], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  excludedAt    DateTime?
}

model ItemInventario {
  id                 Int      @id @default(autoincrement())
  idPropriedade      Int
  nome               String
  quantidade         Int      @default(1)
  estadoConservacao  EstadoConservacao @default(BOM)
  categoria          String?
  dataAquisicao      DateTime?
  descricao          String?
  valorEstimado      Float?
  codigoBarras       String?  @unique

  propriedade        Propriedades     @relation(fields: [idPropriedade], references: [id])
  fotos              FotoInventario[]
  checklists         ItemChecklist[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  excludedAt         DateTime?
}

model FotoInventario {
  id               Int      @id @default(autoincrement())
  idItemInventario Int
  filename         String
  url              String

  itemInventario   ItemInventario @relation(fields: [idItemInventario], references: [id])
  uploadedAt       DateTime       @default(now())
  excludedAt       DateTime?
}

model Convite {
  id                Int           @id @default(autoincrement())
  token             String        @unique
  emailConvidado    String
  idPropriedade     Int
  idConvidadoPor    Int
  permissao         String
  porcentagemCota   Float         @default(0)
  usuarioJaExiste   Boolean       @default(false)
  dataExpiracao     DateTime
  status            StatusConvite @default(PENDENTE)
  aceitoEm          DateTime?

  propriedade     Propriedades @relation(fields: [idPropriedade], references: [id])
  convidadoPor    User         @relation("ConvidadoPor", fields: [idConvidadoPor], references: [id])

  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

model Despesa {
  id              Int      @id @default(autoincrement())
  idPropriedade   Int
  criadoPorId     Int
  descricao       String
  valor           Float
  dataVencimento  DateTime
  categoria       String
  observacao      String?
  urlComprovante  String?
  status          StatusPagamento @default(PENDENTE)
  recorrenciaPaiId Int?
  // Campos para recorrência
  recorrente      Boolean  @default(false)
  frequencia      String?  // Ex: 'DIARIO', 'SEMANAL', 'MENSAL', 'ANUAL'
  diaRecorrencia  Int?     // Dia do mês para recorrência mensal

  // Campos para multa e juros (opcionais)
  multaAtraso     Float?   // Valor percentual da multa (ex: 2 para 2%)
  jurosAtraso     Float?   // Valor percentual dos juros ao mês (ex: 1 para 1%)

  // Relacionamentos
  
  propriedade     Propriedades       @relation(fields: [idPropriedade], references: [id])
  recorrenciaPai   Despesa?  @relation("Recorrencia", fields: [recorrenciaPaiId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  despesasFilhas   Despesa[] @relation("Recorrencia")
  pagamentos      PagamentoCotista[]
  criadoPor       User           @relation("CriadoPor", fields: [criadoPorId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PagamentoCotista {
  id            Int      @id @default(autoincrement())
  idDespesa     Int
  idCotista     Int
  valorDevido   Float
  pago          Boolean  @default(false)
  dataPagamento DateTime?

  despesa Despesa @relation(fields: [idDespesa], references: [id])
  cotista User    @relation(fields: [idCotista], references: [id])

  @@unique([idDespesa, idCotista])
}

model Notificacao {
  id            Int      @id @default(autoincrement())
  idPropriedade Int
  idAutor       Int      
  mensagem      String   
  
  lidaPor       User[]   @relation("NotificacoesLidas") 

  propriedade   Propriedades @relation(fields: [idPropriedade], references: [id])
  autor         User         @relation(fields: [idAutor], references: [id], name: "AutorDaNotificacao")

  createdAt     DateTime @default(now())
}