# Todos direitos autorais reservados pelo QOTA.

# Workflow de Integração Contínua (CI) para o projeto Qota.
# Este pipeline é projetado para automatizar a verificação de qualidade do código,
# executando testes e builds para o back-end e front-end de forma independente.
name: Qota CI - Build, Test and Quality

# Define que o workflow será acionado automaticamente em eventos de push ou pull request
# na branch 'main'. Isso garante que toda nova contribuição seja validada.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Agrupa os trabalhos (jobs) que serão executados em paralelo para otimizar o tempo de execução.
jobs:
  # Job 'backend-ci': Responsável por validar a integridade e o funcionamento do back-end.
  backend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./TCC-Back-main
    
    steps:
      # 1. Checkout: Clona o repositório para o ambiente de execução do workflow.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js: Configura o ambiente com a versão 20 do Node.js.
      # O cache é ativado para as dependências do npm, acelerando futuras execuções.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'TCC-Back-main/package-lock.json'

      # 3. Install Dependencies: Instala as dependências do projeto de forma limpa
      # a partir do 'package-lock.json' para garantir consistência.
      - name: Install Dependencies
        run: npm ci

      # 4. Generate Prisma Client: Gera o cliente Prisma com base no schema definido.
      - name: Generate Prisma Client
        run: npx prisma generate

      # 5. Run Prisma Migrations: Aplica as migrações do banco de dados no ambiente de teste.
      # Utiliza um banco de dados de teste isolado, configurado via secrets.
      - name: Run Prisma Migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}

      # 6. Run Automated Tests: Executa a suíte de testes automatizados (unitários, integração, etc.).
      # As variáveis de ambiente para o teste são injetadas de forma segura.
      - name: Run Automated Tests
        run: npm test
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET_TEST }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET_TEST }}

  # Job 'frontend-ci': Responsável por construir e testar a aplicação front-end.
  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./TCC-Front_Web
        
    steps:
      # 1. Checkout: Clona o repositório para o ambiente de execução.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup Node.js: Configura o ambiente Node.js e o cache de dependências.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'TCC-Front_Web/package-lock.json'

      # 3. Install Dependencies: Instala as dependências do front-end.
      - name: Install Dependencies
        run: npm ci
      
      # 4. Run Component Tests: Executa os testes de componente para validar a UI.
      - name: Run Component Tests
        run: npm test
        
      # 5. Build Project: Compila o projeto para produção, verificando se não há erros de build.
      - name: Build Project
        run: npm run build
