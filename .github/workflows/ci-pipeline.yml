# Todos direitos autorais reservados pelo QOTA.

name: Qota CI - Build, Test and Quality

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  backend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./TCC-Back-main
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'TCC-Back-main/package-lock.json'

      # Etapa adicionada para instalar dependências do sistema para o SQLite
      - name: Install System Dependencies for Prisma
        run: sudo apt-get update && sudo apt-get install -y sqlite3 libsqlite3-dev

      - name: Install Project Dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      # O comando 'migrate deploy' é o correto para ambientes de CI/CD
      - name: Run Prisma Migrations
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}

      - name: Run Automated Tests
        run: npm test
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET_TEST }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET_TEST }}

  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./TCC-Front_Web
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'TCC-Front_Web/package-lock.json'

      - name: Install Project Dependencies
        run: npm ci
      
      - name: Run Component Tests
        run: npm test
        
      - name: Build Project for Production
        run: npm run build