# Nome do workflow, que aparecerá na aba "Actions" do seu repositório no GitHub.
name: Qota CI - Build and Test

# Define os gatilhos (triggers) que iniciarão a pipeline.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Define os "trabalhos" (jobs) que a pipeline executará.
jobs:
  # --- Job para o Back-end ---
  backend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./TCC-Back-main

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15.0'
          cache: 'npm'
          cache-dependency-path: 'TCC-Back-main/package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Run Automated Tests
        run: npm test
        # Adiciona as variáveis de ambiente necessárias para o teste a partir dos Segredos do GitHub.
        # Isso garante que a aplicação possa se conectar ao banco e usar os segredos de JWT.
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL_TEST }}
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET_TEST }}
          REFRESH_TOKEN_SECRET: ${{ secrets.REFRESH_TOKEN_SECRET_TEST }}

  # --- Job para o Front-end ---
  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./TCC-Front_Web

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'TCC-Front_Web/package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Build Project
        run: npm run build