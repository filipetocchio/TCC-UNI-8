# Nome do workflow, que aparecerá na aba "Actions" do seu repositório no GitHub.
name: Qota CI - Build and Test

# Define os gatilhos (triggers) que iniciarão a pipeline.
on:
  # Roda a pipeline sempre que houver um push para a branch 'main'.
  push:
    branches: [ "main" ]
  # Roda a pipeline sempre que um Pull Request for aberto (ou atualizado) para a branch 'main'.
  pull_request:
    branches: [ "main" ]

# Define os "trabalhos" (jobs) que a pipeline executará.
# Eles podem rodar em paralelo para otimizar o tempo.
jobs:
  # --- Job para o Back-end ---
  backend-ci:
    # Define o ambiente virtual onde o job rodará. 'ubuntu-latest' é o padrão de mercado.
    runs-on: ubuntu-latest

    # Define o diretório de trabalho para este job. Essencial em um monorepo.
    defaults:
      run:
        working-directory: ./TCC-Back-main

    steps:
      # 1. Checkout do Código: Baixa o seu código para o ambiente virtual.
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Setup do Node.js: Instala a versão especificada do Node.js.
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Use a versão do Node.js do seu projeto
          cache: 'npm'
          cache-dependency-path: 'TCC-Back-main/package-lock.json'

      # 3. Instalar Dependências: Usa 'npm ci' que é mais rápido e seguro para pipelines.
      - name: Install Dependencies
        run: npm ci

      # 4. Gerar o Prisma Client: Passo crucial para o Prisma funcionar em um ambiente limpo.
      - name: Generate Prisma Client
        run: npx prisma generate

      # 5. Rodar os Testes Automatizados: Executa o script 'npm test'.
      # A variável de ambiente é necessária para o JWT.
      - name: Run Automated Tests
        run: npm test
        env:
          ACCESS_TOKEN_SECRET: ${{ secrets.ACCESS_TOKEN_SECRET_TEST }} # Use um segredo do GitHub para testes

  # --- Job para o Front-end ---
  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./TCC-Front_Web

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'TCC-Front_Web/package-lock.json'

      - name: Install Dependencies
        run: npm ci

      # 6. Build do Projeto Front-end: Um teste crítico. Se o build falhar, o código está quebrado.
      - name: Build Project
        run: npm run build